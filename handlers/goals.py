from telebot import types
from datetime import datetime
from models.database import is_user_registered
from utils.helpers import get_progress_bar
from handlers.bot import bot
import sqlite3

@bot.message_handler(commands=['set_goal'])
def set_goal(message):
    user_id = message.from_user.id
    if not is_user_registered(user_id):
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /register.")
        return
    
    try:
        parts = message.text.split(maxsplit=2)
        if len(parts) < 3:
            bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /set_goal [—Å—É–º–º–∞] [–æ–ø–∏—Å–∞–Ω–∏–µ]")
            return
        
        target_amount = float(parts[1])
        description = parts[2]
        
        if target_amount <= 0:
            bot.send_message(message.chat.id, "–°—É–º–º–∞ —Ü–µ–ª–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!")
            return
        
        conn = sqlite3.connect('finance_bot.db')
        cursor = conn.cursor()
        created_date = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        
        cursor.execute('INSERT INTO goals (user_id, target_amount, description, created_date) VALUES (?, ?, ?, ?)',
                      (user_id, target_amount, description, created_date))
        conn.commit()
        conn.close()
        
        bot.send_message(message.chat.id, f"–¶–µ–ª—å '{description}' –Ω–∞ —Å—É–º–º—É {target_amount} —Ä—É–±. —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
    
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10000).")

@bot.message_handler(commands=['view_goals'])
def view_goals(message):
    user_id = message.from_user.id
    if not is_user_registered(user_id):
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /register.")
        return
    
    conn = sqlite3.connect('finance_bot.db')
    cursor = conn.cursor()
    
    cursor.execute('SELECT SUM(amount) FROM transactions WHERE user_id = ? AND type = "income"', (user_id,))
    total_income = cursor.fetchone()[0] or 0
    
    cursor.execute('SELECT SUM(amount) FROM transactions WHERE user_id = ? AND type = "expense"', (user_id,))
    total_expense = cursor.fetchone()[0] or 0
    
    current_balance = total_income - total_expense
    
    cursor.execute('SELECT id, target_amount, current_amount, description, created_date, achieved FROM goals WHERE user_id = ? ORDER BY created_date DESC', (user_id,))
    goals = cursor.fetchall()
    conn.close()
    
    if not goals:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ü–µ–ª–µ–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /set_goal, —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª—å.")
        return
    
    message_text = "üéØ –í–∞—à–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ü–µ–ª–∏:\n\n"
    message_text += f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {current_balance:.2f} —Ä—É–±.\n\n"
    
    for goal in goals:
        goal_id, target_amount, current_amount, description, created_date, achieved = goal
        created_date_obj = datetime.strptime(created_date, '%Y-%m-%d %H:%M:%S')
        formatted_date = created_date_obj.strftime('%d.%m.%Y')
        
        progress = min(current_balance / target_amount * 100, 100) if target_amount > 0 else 0
        progress_bar = get_progress_bar(progress)
        
        status = "‚úÖ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞" if achieved else "‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ"
        
        message_text += (
            f"#{goal_id} | {description}\n"
            f"–¶–µ–ª—å: {target_amount:.2f} —Ä—É–±. | {status}\n"
            f"–î–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {formatted_date}\n"
            f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress:.1f}%\n"
            f"{progress_bar}\n\n"
        )
    
    bot.send_message(message.chat.id, message_text)